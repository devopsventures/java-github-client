name: Publish to Repository

#
# This workflow uses the actions/setup-java to provide a version of Java JDK to compile against and will
# use the provided hosted runner Maven version.
#
# All dependencies are resolved via an Artifactory instance instead of going to the internet.
#
# The deployment is performed using the alternate repository URLs injected in on the command line so as
# to direct the deployment to the Artifactory Maven repositories for releases and snapshots which are stored
# as secrets at the Repository or Organization level.
#
# This is also a manually triggered workflow so as to control the deployments (but it can be automated by adding
# other event triggers).
#

on:
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build, Test and Publish

    runs-on: ubuntu-20.04

    steps:
      - name: Set up Java JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
          java-package: jdk

      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: Cache Maven Repository
        id: cache-maven-repository
        uses: actions/cache@v2
        with:
          path: .m2/repository
          key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}

      - name: Did we get a cache hit
        run: echo "Cache Hit? ${{ steps.cache-maven-repository.outputs.cache-hit }}"

      - name: Maven Build and Test
        env:
          GITHUB_TEST_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn deploy --batch-mode --settings ./settings.xml \
            -Dartifactory.server.mirror.url=${{ secrets.ARTIFACTORY_SERVER_MIRROR_URL }} \
            -Dartifactory.user.name=${{ secrets.ARTIFACTORY_USERNAME }} \
            -Dartifactory.user.password=${{ secrets.ARTIFACTORY_PASSWORD }} \
            -DaltReleaseDeploymentRepository=artifactory::${{ secrets.ARTIFACTORY_RELEASE_REPOSITORY_URL }} \
            -DaltSnapshotDeploymentRepository=artifactory::${{ secrets.ARTIFACTORY_SNAPSHOT_REPOSITORY_URL }}
        shell: bash
      
